import argparse
import sys
from os.path import isfile, join
from os import listdir


def get_file_paths_from_directory(directory_path):
    """
    Returns all paths of files given a directory path
    :param directory_path: Path to the directory
    :return: A list of paths of files
    """
    file_paths = [join(directory_path, file) for file in listdir(directory_path) if isfile(join(directory_path, file)) and file[-2:] == 'h5']
    return file_paths


def create_csv_file(marginpolish_output_directory, output_path, train_mode):
    all_hdf5_file_paths = sorted(get_file_paths_from_directory(marginpolish_output_directory))

    if train_mode:
        total_length = len(all_hdf5_file_paths)
        selected_training_samples = int(total_length * 0.8)

        training_samples = all_hdf5_file_paths[:selected_training_samples]
        testing_samples = all_hdf5_file_paths[selected_training_samples:]

        train_data_file_name = output_path + "train" + "_images_marginpolish" + ".csv"
        sys.stderr.write("WRITING " + str(len(training_samples)) + " SAMPLES TO train_images_marginpolish.csv\n")

        train_data_file = open(train_data_file_name, mode='w')
        output_str = '\n'.join(training_samples)
        train_data_file.write(output_str)

        test_data_file_name = output_path + "test" + "_images_marginpolish" + ".csv"
        sys.stderr.write("WRITING " + str(len(testing_samples)) + " SAMPLES TO test_images_marginpolish.csv\n")

        test_data_file = open(test_data_file_name, mode='w')
        output_str = '\n'.join(testing_samples)
        test_data_file.write(output_str)
    else:
        test_data_file_name = output_path + "images_marginpolish" + ".csv"
        sys.stderr.write("WRITING " + str(len(all_hdf5_file_paths)) + " SAMPLES TO images_marginpolish.csv\n")

        test_data_file = open(test_data_file_name, mode='w')
        output_str = '\n'.join(all_hdf5_file_paths)
        test_data_file.write(output_str)


if __name__ == '__main__':
    '''
    Processes arguments and performs tasks.
    '''
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--h5py_dir",
        type=str,
        required=True,
        help="H5PY file generated by HELEN."
    )
    parser.add_argument(
        "--output_dir",
        type=str,
        required=True,
        help="H5PY file generated by MEDAKA."
    )
    parser.add_argument(
        "--train_mode",
        type=lambda x: (str(x).lower() == 'true' or str(x).lower() == '1'),
        default=False,
        help="If true then compare labels too."
    )

    FLAGS, unparsed = parser.parse_known_args()
    create_csv_file(FLAGS.h5py_dir, FLAGS.output_dir, FLAGS.train_mode)
