import h5py
import argparse
from collections import defaultdict, OrderedDict
import yaml
from tqdm import tqdm
from os import listdir, remove
from os.path import isfile, join
import operator
import numpy as np

helen_positional_features = defaultdict(list)
helen_positional_labels = defaultdict(int)
all_helen_positions = set()
all_medaka_positions = set()
_gap_ = '*'
_ref_gap_ = '#'
_read_sep_ = ' '
_alphabet_ = 'ACGT'
_extra_bases_ = 'NRYSWKMBDHV'
decoding = _gap_ + _alphabet_.lower() + _alphabet_.upper() + _read_sep_ + _extra_bases_
encoding = OrderedDict(((a, i) for i, a in enumerate(decoding)))
helen_decoding = {0: '*', 1: 'A', 2: 'C', 3: 'G', 4: 'T', 5: '*'}

prediction_dict = defaultdict(list)
position_dict = defaultdict(set)
chromosome_list = set()
label_decoder = {0: 'A', 1: 'C', 2: 'G', 3: 'T', 4: ''}


def get_file_paths_from_directory(directory_path):
    """
    Returns all paths of files given a directory path
    :param directory_path: Path to the directory
    :return: A list of paths of files
    """
    file_paths = [join(directory_path, file) for file in listdir(directory_path) if isfile(join(directory_path, file))
                  and file[-2:] == 'h5']
    return file_paths


def process_marginpolish_data(marginpolish_output_directory, csv_output_dir):
    all_hdf5_file_paths = sorted(get_file_paths_from_directory(marginpolish_output_directory))
    total_length = len(all_hdf5_file_paths)
    selected_training_samples = int(total_length * 0.8)

    training_samples = all_hdf5_file_paths[:selected_training_samples]
    testing_samples = all_hdf5_file_paths[selected_training_samples:]

    train_file_csv = open(csv_output_dir + "train.csv", 'w')
    for sample in training_samples:
        train_file_csv.write(sample + "\n")

    test_file_csv = open(csv_output_dir + "test.csv", 'w')
    for sample in testing_samples:
        test_file_csv.write(sample + "\n")


if __name__ == '__main__':
    '''
    Processes arguments and performs tasks.
    '''
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--marginpolish_dir",
        type=str,
        required=True,
        help="H5PY file generated by HELEN."
    )
    parser.add_argument(
        "--csv_output_dir",
        type=str,
        required=True,
        help="H5PY file generated by HELEN."
    )

    FLAGS, unparsed = parser.parse_known_args()
    process_marginpolish_data(FLAGS.marginpolish_dir, FLAGS.csv_output_dir)
    # comapare_medaka_h5py(FLAGS.medaka_h5py, FLAGS.with_label)
